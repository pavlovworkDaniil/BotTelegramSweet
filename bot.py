"""Telegram sweet shop bot.

This module implements a Telegram bot that acts as a small online store for
confectionery products.  The bot is intentionally lightweight and requires no
external database; all data about sweets is stored in memory.  This makes it a
good starting point for demonstration purposes and for local development.

To run the bot you will need to install the dependencies listed in
``requirements.txt`` and provide the bot token in the ``TELEGRAM_TOKEN``
environment variable before executing the script.
"""

from __future__ import annotations

import logging
import os
from dataclasses import dataclass
from typing import Dict, List, MutableMapping

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import (ApplicationBuilder, CallbackQueryHandler,
                          CommandHandler, ContextTypes, MessageHandler,
                          filters)


LOGGER = logging.getLogger(__name__)


@dataclass(frozen=True)
class Sweet:
    """A single item that can be purchased in the shop."""

    id: str
    name: str
    price_rub: int
    description: str


SWEET_CATALOGUE: Dict[str, List[Sweet]] = {
    "chocolate": [
        Sweet(
            id="milk_chocolate",
            name="–ú–æ–ª–æ—á–Ω—ã–π —à–æ–∫–æ–ª–∞–¥",
            price_rub=220,
            description="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–ª–∏—Ç–∫–∞ –º–æ–ª–æ—á–Ω–æ–≥–æ —à–æ–∫–æ–ª–∞–¥–∞ —Å –ª–µ–≥–∫–æ–π"
            " –∫–∞—Ä–∞–º–µ–ª—å–Ω–æ–π –Ω–æ—Ç–∫–æ–π.",
        ),
        Sweet(
            id="dark_truffle",
            name="–¢—Ä—é—Ñ–µ–ª—å 72%",
            price_rub=280,
            description="–¢–µ–º–Ω—ã–π —à–æ–∫–æ–ª–∞–¥ —Å –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º –≤–∫—É—Å–æ–º –∫–∞–∫–∞–æ –∏"
            " —Ö—Ä—É—Å—Ç—è—â–∏–º–∏ –∫–∞–∫–∞–æ-–∫—Ä—É–ø–∫–∞–º–∏.",
        ),
    ],
    "caramel": [
        Sweet(
            id="salted_caramel",
            name="–°–æ–ª–µ–Ω–∞—è –∫–∞—Ä–∞–º–µ–ª—å",
            price_rub=150,
            description="–ù–µ–∂–Ω–∞—è —Ç—è–Ω—É—á–∫–∞ –Ω–∞ —Å–ª–∏–≤–∫–∞—Ö —Å –ª–µ–≥–∫–æ–π –Ω–æ—Ç–∫–æ–π –º–æ—Ä—Å–∫–æ–π"
            " —Å–æ–ª–∏.",
        ),
        Sweet(
            id="hazelnut_caramel",
            name="–ö–∞—Ä–∞–º–µ–ª—å —Å —Ñ—É–Ω–¥—É–∫–æ–º",
            price_rub=190,
            description="–ú—è–≥–∫–∞—è –∫–∞—Ä–∞–º–µ–ª—å, —É–∫—Ä–∞—à–µ–Ω–Ω–∞—è –¥—Ä–æ–±–ª–µ–Ω—ã–º —Ñ—É–Ω–¥—É–∫–æ–º.",
        ),
    ],
    "cookies": [
        Sweet(
            id="choco_chip_cookie",
            name="–ü–µ—á–µ–Ω—å–µ —Å —à–æ–∫–æ–ª–∞–¥–Ω–æ–π –∫—Ä–æ—à–∫–æ–π",
            price_rub=120,
            description="–î–æ–º–∞—à–Ω–µ–µ –ø–µ—á–µ–Ω—å–µ –∏–∑ —Å–ª–∏–≤–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞, —â–µ–¥—Ä–æ"
            " –ø–æ—Å—ã–ø–∞–Ω–Ω–æ–µ —à–æ–∫–æ–ª–∞–¥–æ–º.",
        ),
        Sweet(
            id="red_velvet_cookie",
            name="–ü–µ—á–µ–Ω—å–µ ¬´–ö—Ä–∞—Å–Ω—ã–π –±–∞—Ä—Ö–∞—Ç¬ª",
            price_rub=130,
            description="–ú—è–≥–∫–æ–µ –ø–µ—á–µ–Ω—å–µ —Å –Ω–µ–∂–Ω—ã–º –∫—Ä–µ–º–æ–≤—ã–º –ø–æ—Å–ª–µ–≤–∫—É—Å–∏–µ–º.",
        ),
    ],
}


def _get_cart(user_data: MutableMapping[str, object]) -> Dict[str, int]:
    """Return the shopping cart stored in ``user_data``."""

    cart = user_data.setdefault("cart", {})
    if not isinstance(cart, dict):  # Defensive programming in case of misuse.
        user_data["cart"] = {}
        cart = user_data["cart"]
    return cart  # type: ignore[return-value]


def _format_currency(amount_rub: int) -> str:
    """Format an integer price in rubles using the ‚ÇΩ symbol."""

    return f"{amount_rub} ‚ÇΩ"


def _build_categories_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text=_category_title(category), callback_data=f"cat:{category}")]
        for category in SWEET_CATALOGUE
    ]
    buttons.append([InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart:view")])
    return InlineKeyboardMarkup(buttons)


def _build_sweets_keyboard(category: str) -> InlineKeyboardMarkup:
    sweets = SWEET_CATALOGUE.get(category)
    if not sweets:
        return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")]])

    buttons: List[List[InlineKeyboardButton]] = []
    for sweet in sweets:
        buttons.append(
            [
                InlineKeyboardButton(
                    text=f"{sweet.name} ‚Äî {_format_currency(sweet.price_rub)}",
                    callback_data=f"item:{sweet.id}",
                )
            ]
        )

    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")])
    return InlineKeyboardMarkup(buttons)


def _build_item_keyboard(sweet: Sweet) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add:{sweet.id}"),
            ],
            [
                InlineKeyboardButton("üõí –û—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:view"),
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu"),
            ],
        ]
    )


def _build_cart_keyboard(cart: Dict[str, int]) -> InlineKeyboardMarkup:
    buttons: List[List[InlineKeyboardButton]] = []
    if cart:
        buttons.append(
            [
                InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å", callback_data="cart:clear"),
                InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cart:checkout"),
            ]
        )
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö —Ç–æ–≤–∞—Ä–∞–º", callback_data="menu")])
    return InlineKeyboardMarkup(buttons)


def _category_title(category: str) -> str:
    titles = {
        "chocolate": "–®–æ–∫–æ–ª–∞–¥",
        "caramel": "–ö–∞—Ä–∞–º–µ–ª—å",
        "cookies": "–ü–µ—á–µ–Ω—å–µ",
    }
    return titles.get(category, category)


def _find_sweet_by_id(sweet_id: str) -> Sweet | None:
    for sweets in SWEET_CATALOGUE.values():
        for sweet in sweets:
            if sweet.id == sweet_id:
                return sweet
    return None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /start command."""

    user_first_name = update.effective_user.first_name if update.effective_user else "–≥–æ—Å—Ç—å"
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_first_name}! üëã\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Sweet Shop ‚Äî –Ω–∞—à —É—é—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω —Å–ª–∞–¥–æ—Å—Ç–µ–π."
        "\n\n–í—ã–±–∏—Ä–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ"
        " –∫–æ—Ä–∑–∏–Ω—É, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑."
    )
    message = update.effective_message
    if message:
        await message.reply_text(text, reply_markup=_build_categories_keyboard())


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Provide help information about the bot."""

    text = (
        "–Ø –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω —Å–ª–∞–¥–æ—Å—Ç–µ–π. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∞–¥–æ—Å—Ç–µ–π.\n"
        "‚Ä¢ /cart ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É.\n"
        "‚Ä¢ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –∏"
        " –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑."
    )
    message = update.effective_message
    if message:
        await message.reply_text(text)


async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /menu command."""

    message = update.effective_message
    if message:
        await message.reply_text("–í—ã–±–∏—Ä–∞–π—Ç–µ —Å–ª–∞–¥–æ—Å—Ç–∏:", reply_markup=_build_categories_keyboard())


async def cart_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /cart command."""

    cart = _get_cart(context.user_data)
    message = update.effective_message
    if message:
        await message.reply_text(_format_cart(cart), reply_markup=_build_cart_keyboard(cart))


def _format_cart(cart: Dict[str, int]) -> str:
    if not cart:
        return "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –º–µ–Ω—é –∏ –¥–æ–±–∞–≤—å—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤–∫—É—Å–Ω–æ–µ!"

    lines = ["üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:"]
    total = 0
    for sweet_id, quantity in cart.items():
        sweet = _find_sweet_by_id(sweet_id)
        if not sweet:
            continue
        line_total = sweet.price_rub * quantity
        total += line_total
        lines.append(
            f"‚Ä¢ {sweet.name} ‚Äî {quantity} —à—Ç. √ó {_format_currency(sweet.price_rub)}"
            f" = {_format_currency(line_total)}"
        )

    lines.append("")
    lines.append(f"–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {_format_currency(total)}")
    lines.append(
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑¬ª –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è"
        " —Å –≤–∞–º–∏."
    )
    return "\n".join(lines)


async def handle_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle button presses from the inline keyboards."""

    if not update.callback_query:
        return

    query = update.callback_query
    await query.answer()

    data = query.data or ""
    LOGGER.debug("Received callback data: %s", data)

    if data == "menu":
        await query.edit_message_text(
            text="–í—ã–±–∏—Ä–∞–π—Ç–µ —Å–ª–∞–¥–æ—Å—Ç–∏:",
            reply_markup=_build_categories_keyboard(),
        )
        return

    if data.startswith("cat:"):
        category = data.split(":", 1)[1]
        sweets = SWEET_CATALOGUE.get(category)
        if not sweets:
            await query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        await query.edit_message_text(
            text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {_category_title(category)}",
            reply_markup=_build_sweets_keyboard(category),
        )
        return

    if data.startswith("item:"):
        sweet_id = data.split(":", 1)[1]
        sweet = _find_sweet_by_id(sweet_id)
        if not sweet:
            await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        description = (
            f"<b>{sweet.name}</b>\n"
            f"–¶–µ–Ω–∞: {_format_currency(sweet.price_rub)}\n\n"
            f"{sweet.description}"
        )
        await query.edit_message_text(
            text=description,
            parse_mode=ParseMode.HTML,
            reply_markup=_build_item_keyboard(sweet),
        )
        return

    if data.startswith("add:"):
        sweet_id = data.split(":", 1)[1]
        sweet = _find_sweet_by_id(sweet_id)
        if not sweet:
            await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        cart = _get_cart(context.user_data)
        cart[sweet_id] = cart.get(sweet_id, 0) + 1
        await query.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É")
        await query.edit_message_reply_markup(reply_markup=_build_item_keyboard(sweet))
        return

    if data.startswith("cart:"):
        action = data.split(":", 1)[1]
        cart = _get_cart(context.user_data)

        if action == "view":
            await query.edit_message_text(
                text=_format_cart(cart),
                reply_markup=_build_cart_keyboard(cart),
            )
            return

        if action == "clear":
            cart.clear()
            await query.edit_message_text(
                text="–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞. –ß–µ–º –µ—â–µ –º–æ–∂–µ–º –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å?",
                reply_markup=_build_cart_keyboard(cart),
            )
            return

        if action == "checkout":
            if not cart:
                await query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
                return

            await query.edit_message_text(
                text=(
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! üéâ\n"
                    "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è"
                    " —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã."
                ),
                reply_markup=_build_categories_keyboard(),
            )
            cart.clear()
            return

    await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle unrecognised commands."""

    message = update.effective_message
    if message:
        await message.reply_text(
            "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–ª–∞–¥–æ—Å—Ç–∏."
        )


def main() -> None:
    """Entrypoint for the bot application."""

    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO,
    )

    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        raise RuntimeError(
            "Environment variable TELEGRAM_TOKEN is not set. "
            "Export the bot token before starting the bot."
        )

    application = ApplicationBuilder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CommandHandler("cart", cart_command))
    application.add_handler(CallbackQueryHandler(handle_callbacks))
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))

    LOGGER.info("Sweet Shop bot is starting")
    application.run_polling()


if __name__ == "__main__":
    main()

